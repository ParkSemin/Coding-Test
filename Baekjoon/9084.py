'''
<입략>
- 첫 줄(T) : 테스트 케이스의 개수
- 각 테스트 케이스 별 첫 줄(N) : 동전의 가지 수 (1 <= N <= 20), 오름차순 정렬 상태
- 각 테스트 케이스 별 둘째 줄 : 동전의 각 금액 (1 <= C <= 10000)
- 각 테스트 케이스 별 셋째 줄(M) : 동전으로 만들어야 할 금액 (1 <= M <= 10000)

<출력>
- 각 테스트 케이스 별 주어지는 N가지 동전으로 M을 만드는 모든 방법의 수

<풀이 방향>
- 대충 읽어보면 DP문제라는 것을 알 수 있다(~하는 경우의 최솟값/최댓값 => dp문제).
- DP? => 점화식!

<예제 입력>
동전 : 5원, 7원
목표 : 22원

row: 동전 값어치, column: 목표 동전 값어치
\	0	1	2	3	4	5	6	7	8	9	10	11	12	13	14	15	16	17	18	19	20	21	22
0	1	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0
5	1	0	0	0	0	1	0	0	0	0	1	0	0	0	0	1	0	0	0	0	1	0	0
7	1	0	0	0	0	1	0	1	0	0	1	0	1	0	1	1	0	1	0	0	1	1	1

=> 점화식 : dp[i][j] = dp[i-1][j] + dp[i][j-(현재 동전의 값어치)]
   ex) dp[2][12] = dp[1][12] + dp[2][5] = 0 + 1 = 1
'''

import sys
input = sys.stdin.readline

# 1. 입력 받기
T = int(input())
for _ in range(T):
    N = int(input())
    coins = list(map(int, input().split()))
    M = int(input())

    # dp 2차원 리스트 초기화
    dp = [ [1] + [0]*M for _ in range(N+1) ] # 행, 열은 모두 N+1개(0부터 시작해야 함)

    # 동전 갯수만큼 반복
    for i in range(1, N+1):
        dp[i] = dp[i-1].copy()

        for j in range(coins[i-1], M+1):
            dp[i][j] = dp[i-1][j] + dp[i][j-coins[i-1]] # 점화식 적용

    print(dp[N][M])